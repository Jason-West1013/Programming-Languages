 -- Read one word per line and print list of unique words and their frequencies
-- Case sensitive
-- This is a minimalist version.  No bells or whistles.
WITH Ada.Strings.Unbounded; USE Ada.Strings.Unbounded;
with ada.Text_IO.Unbounded_IO; use ada.Text_IO.Unbounded_IO;
with ada.integer_text_io; use ada.integer_text_io;
with ada.text_io; use ada.text_io;

procedure v2  is
   type Word is record
      s: String(1 .. 120);  -- The string.  Assume 120 characters or less
      wlen: Natural;        -- Length of the word
      count: Natural := 0;  -- Total number of occurrences of this word
   end record;

   type Word_Array is array(1 .. 1000) of Word;

   type Word_List is record
      words: Word_Array;        --  The unique words
      num_words: Natural := 0;   --  How many unique words seen so far
   end record;

   procedure get_words(wl: out Word_List) is
   begin
      wl.num_words := 0;  -- only to get rid of a warning
      while not End_of_File loop
         declare
            s: String := Get_Line;
            Found: Boolean := False;
            Char_Val : INTEGER;
            isWord: Boolean := true;
            word_index : Integer := 1;
            wordComplete : Boolean := false;
         BEGIN
            -- pull out word
            FOR J IN 1 .. S'Length LOOP
               Char_Val := Character'Pos(S(J));

               if (length(word_buff) = 0) and (((char_val < 65) or (char_val > 90)) and ((char_val < 97) or (char_val > 122))) then
                  isWord := false;
                  put("Bad first letter.");
               elsif ((Char_Val >= 48) AND (Char_Val < 58)) OR ((Char_Val >=65) AND (Char_Val < 91)) or ((char_val >= 97) and (char_val < 123)) or (char_val = 45) or (char_val = 95) THEN
                  append(word_buff, s(j));
                  if not (

                  Put("This is the word so far " & Word_Buff);
                  New_Line;
               else
                  wordComplete := true;
               end if;

                 -- need to fix the problem of skipping only one word

               if (isWord) then

               end if;





            END LOOP;

            -- look through frequency list logic
            for i in 1 .. wl.num_words loop
               if s = wl.words(i).s(1 .. wl.words(i).wlen) then
                  wl.words(i).count := wl.words(i).count + 1;
                  found := true;
               end if;
               exit when found;
            end loop;

            if not found then -- Add word to list
               wl.num_words := wl.num_words + 1;
               wl.words(wl.num_words).s(1 .. s'last) := s;
               wl.words(wl.num_words).wlen := s'length;
               wl.words(wl.num_words).count := 1;
            end if;
         end; --  declare
      end loop;
   END Get_Words;

   PROCEDURE sort_words(Wl: in out Word_List) IS
         n : integer := wl.num_words;
         j : Integer;
         temp : Word;
   BEGIN
      for i IN 2 .. n LOOP
         Temp := Wl.Words(I);
         --put(temp.s);
         j := i - 1;
         while j in wl.words'range and then wl.words(j).s > temp.s loop
            --put(wl.words(j).s);
            wl.words(j + 1) := wl.words(j);
            --put(wl.words(j+1).s);
            -- put(wl.words(j).s);
            j := j - 1;
         end loop;
         wl.words(j + 1) := temp;
      end loop;
   END sort_words;

   PROCEDURE Put_Words(wl: Word_List) IS
   BEGIN
      for i in 1 .. wl.num_words loop
         put(wl.words(i).count);
         put(" " & wl.words(i).s(1 .. wl.words(i).wlen));
         new_line;
      end loop;
   END Put_Words;

   the_words: Word_List;
begin
   Get_Words(The_Words);
   -- Sort_Words(The_Words);
   -- put_words(the_words);
end v2;