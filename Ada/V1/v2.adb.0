 -- Read one word per line and print list of unique words and their frequencies
-- Case sensitive
-- This is a minimalist version.  No bells or whistles.
WITH Ada.Strings.Unbounded; USE Ada.Strings.Unbounded;
with ada.Text_IO.Unbounded_IO; use ada.Text_IO.Unbounded_IO;
with ada.integer_text_io; use ada.integer_text_io;
with ada.text_io; use ada.text_io;

procedure v2  is
   type Word is record
      s: String(1 .. 120);  -- The string.  Assume 120 characters or less
      wlen: Natural;        -- Length of the word
      count: Natural := 0;  -- Total number of occurrences of this word
   end record;

   type Word_Array is array(1 .. 1000) of Word;

   type Word_List is record
      words: Word_Array;        --  The unique words
      num_words: Natural := 0;   --  How many unique words seen so far
   end record;

   procedure get_words(wl: out Word_List) is
   begin
      wl.num_words := 0;  -- only to get rid of a warning
      while not End_of_File loop
         declare
            S: String := Get_Line;
            Found: Boolean := False;
            Char_Val : INTEGER;
            isWord: Boolean := true;
            word_buff: Unbounded_String;
            wordComplete : Boolean := false;
         BEGIN
            -- pull out word
            for j in 1 .. s'length loop
               Char_Val := Character'Pos(S(J));

               if (length(word_buff) = 0) and (((char_val < 65) or (char_val > 90)) and ((char_val < 97) or (char_val > 122))) then
                  isWord := false;
                  -- put("Bad first letter.");
               elsif ((Char_Val >= 48) AND (Char_Val < 58)) OR ((Char_Val >=65) AND (Char_Val < 91)) or ((char_val >= 97) and (char_val < 123)) or (char_val = 45) or (char_val = 95) THEN
                  append(word_buff, s(j));
                  -- Put("This is the word so far " & Word_Buff);
                  -- new_line;
               else
                  wordComplete := true;
               end if;

               if (wordComplete) or ((j + 1) > s'length) then
                  if (isWord) then
                     -- put("This is a good word");
                     -- new_line;

                     -- Have to change so the word buffer is added to the list instead of the entire line.

                     -- look through frequency list logic
                     for i in 1 .. wl.num_words loop
                        if to_string(word_buff) = wl.words(i).s(1 .. wl.words(i).wlen) then
                           wl.words(i).count := wl.words(i).count + 1;
                           found := true;
                        end if;
                     exit when found;
                     end loop;

                     if not found then -- Add word to list
                        wl.num_words := wl.num_words + 1;
                        -- put("Add this word to the list " & word_buff);
                        wl.words(wl.num_words).s(1 .. length(word_buff)) := to_string(word_buff);
                        wl.words(wl.num_words).wlen := length(word_buff);
                        wl.words(wl.num_words).count := 1;
                     END IF;
                     Delete(Word_Buff, 1, Length(Word_Buff));
                  else
                     Put("This is a bad word");
                     new_line;
                     delete(word_buff, 1, length(word_buff));
                  end if;
                  wordComplete := false;
               end if;
             END LOOP;
         end; --  declare
      end loop;
   END Get_Words;

   PROCEDURE sort_words(Wl: in out Word_List) IS
         n : integer := wl.num_words;
         j : Integer;
         temp : Word;
   BEGIN
      for i IN 2 .. n LOOP
         Temp := Wl.Words(I);
         j := i - 1;
         while j in wl.words'range and then wl.words(j).s > temp.s loop
            wl.words(j + 1) := wl.words(j);
            j := j - 1;
         end loop;
         wl.words(j + 1) := temp;
      end loop;
   END sort_words;

   PROCEDURE Put_Words(wl: Word_List) IS
   BEGIN
      for i in 1 .. wl.num_words loop
         put(wl.words(i).count);
         put(" " & wl.words(i).s(1 .. wl.words(i).wlen));
         new_line;
      end loop;
   END Put_Words;

   the_words: Word_List;
begin
   Get_Words(The_Words);
   Sort_Words(The_Words);
   put_words(the_words);
end v2;